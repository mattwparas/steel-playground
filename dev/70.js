(this.webpackJsonp=this.webpackJsonp||[]).push([[70],{57:function(n,e,t){"use strict";t.r(e),e.default="; *thread-queue* : list[continuation]\n(define *thread-queue* '())\n\n; halt : continuation\n(define halt #f)\n\n; current-continuation : -> continuation\n(define (current-continuation)\n  (call/cc\n   (lambda (cc)\n     (cc cc))))\n\n; spawn : (-> anything) -> void\n(define (spawn thunk)\n  (let ((cc (current-continuation)))\n    (if (continuation? cc)\n        (set! *thread-queue* (append *thread-queue* (list cc)))\n        (begin \n               (thunk)\n               (quit)))))\n\n; yield : value -> void\n(define (yield)\n  (let ((cc (current-continuation)))\n    (if (and (continuation? cc) (pair? *thread-queue*))\n        (let ((next-thread (car *thread-queue*)))\n          (set! *thread-queue* (append (cdr *thread-queue*) (list cc)))\n          (next-thread 'resume))\n        void)))\n\n; quit : -> ...\n(define (quit)\n  (if (pair? *thread-queue*)\n      (let ((next-thread (car *thread-queue*)))\n        (set! *thread-queue* (cdr *thread-queue*))\n        (next-thread 'resume))\n      (halt)))\n   \n; start-threads : -> ...\n(define (start-threads)\n  (let ((cc (current-continuation)))\n    (displayln cc)\n    (if cc\n        (begin\n          ; (displayln cc)\n          (set! halt (lambda () \n                        ; (inspect-bytecode cc) \n                        ; (displayln cc)\n                        (cc #f)))\n          ; (displayln cc)\n          (if (null? *thread-queue*)\n              void\n              (begin\n                (let ((next-thread (car *thread-queue*)))\n                  (set! *thread-queue* (cdr *thread-queue*))\n                  (next-thread 'resume)))))\n        void)))\n\n\n;; Example cooperatively threaded program\n(define counter 10)\n\n(define (make-thread-thunk name)\n  (define (loop)\n        (when (< counter 0)\n            (quit))\n        (displayln \"in thread \" name \"; counter = \" counter)\n        (set! counter (- counter 1))\n        (yield)\n        (loop))\n  loop)\n\n(spawn (make-thread-thunk 'a))\n(spawn (make-thread-thunk 'b))\n(spawn (make-thread-thunk 'c))\n\n(start-threads)\n"}}]);