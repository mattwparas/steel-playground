(this.webpackJsonp=this.webpackJsonp||[]).push([[76],{63:function(n,e,l){"use strict";l.r(e),e.default=";;; Define a merge sort for sake of simplicity\n(define (merge-lists l1 l2)\n  (cond [(null? l1) l2]\n        [(null? l2) l1]\n        [(< (car l1) (car l2))\n         (cons (car l1) (merge-lists (cdr l1) l2))]\n        [else\n         (cons (car l2) (merge-lists (cdr l2) l1))]))\n\n;;; -------------------------------------------------------------------\n;;; Given list l, output those tokens of l which are in even positions\n\n(define (even-numbers l)\n  (cond [(null? l) '()]\n        [(null? (cdr l)) '()]\n        [else\n         (cons (car (cdr l)) (even-numbers (cdr (cdr l))))]))\n\n;;; -------------------------------------------------------------------\n;;; Given list l, output those tokens of l which are in odd positions\n\n(define (odd-numbers l)\n  (cond [(null? l) '()]\n        [(null? (cdr l)) (list (car l))]\n        [else\n         (cons (car l) (odd-numbers (cdr (cdr l))))]))\n\n;;; ---------------------------------------------------------------------\n;;; Use the procedures above to create a simple and efficient merge-sort\n\n(define (merge-sort l)\n  (cond [(null? l) l]\n        [(null? (cdr l)) l]\n        [else\n         (merge-lists\n          (merge-sort (odd-numbers l))\n          (merge-sort (even-numbers l)))]))\n\n\n(define lst '(102312 345 324236 11 565 0 2 5 3 6 7 8 3))\n(merge-sort lst)"}}]);