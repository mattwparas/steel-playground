(this.webpackJsonp=this.webpackJsonp||[]).push([[66],{51:function(e,n,t){"use strict";t.r(n),n.default=';;; The Computer Language Benchmarks Game\n;;; https://salsa.debian.org/benchmarksgame-team/benchmarksgame/\n\n;;; Derived from the Chicken variant by Sven Hartrumpf\n;;; contributed by Matthew Flatt\n\n(struct node (left val right))\n\n(define (leaf val)\n  (node #f val #f))\n(define (leaf? l)\n  (not (node-left l)))\n\n(define (make item d)\n  (if (= d 0)\n      (leaf item)\n      (let ([item2 (* item 2)]\n            [d2 (- d 1)])\n        (node (make (- item2 1) d2) item (make item2 d2)))))\n\n(define (check t)\n  (if (leaf? t) 1 (+ 1 (+ (check (node-left t)) (check (node-right t))))))\n\n(define (iterate n m d sum)\n  (if (equal? n m) sum (iterate (+ n 1) m d (+ sum (check (make n d))))))\n\n(define (max x y)\n  (if (> x y) x y))\n\n(define (loop d end max-depth min-depth)\n  (if (>= d end)\n      void\n      (begin\n        (let ([iterations (arithmetic-shift 1 (+ (- max-depth d) min-depth))])\n          (displayln iterations " trees of depth " d " check: " (iterate 0 iterations d 0)))\n        (loop (+ 2 d) end max-depth min-depth))))\n\n(define (main n)\n  (let* ([min-depth 4]\n         [max-depth (max (+ min-depth 2) n)])\n    (let ([stretch-depth (+ max-depth 1)])\n      (displayln "stretch tree of depth " stretch-depth " check: " (check (make 0 stretch-depth))))\n    (let ([long-lived-tree (make 0 max-depth)])\n      (loop 4 (add1 max-depth) max-depth min-depth)\n      (displayln "long lived tree of depth " max-depth " check: " (check long-lived-tree)))))\n\n(main 12)\n'}}]);