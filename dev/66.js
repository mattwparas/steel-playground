(this.webpackJsonp=this.webpackJsonp||[]).push([[66],{51:function(e,n,t){"use strict";t.r(n),n.default=';;; The Computer Language Benchmarks Game\n;;; https://salsa.debian.org/benchmarksgame-team/benchmarksgame/\n\n;;; Derived from the Chicken variant by Sven Hartrumpf\n;;; contributed by Matthew Flatt\n\n(struct node (left val right))\n\n;; Instead of (define-struct leaf (val)):\n(define (leaf val) (node #f val #f))\n(define (leaf? l) (not (node-left l)))\n(define (leaf-val l) (node-val l))\n\n(define (make item d)\n  (if (= d 0)\n      (leaf item)\n      (let ((item2 (* item 2))\n            (d2 (- d 1)))\n        (node (make (- item2 1) d2) \n              item \n              (make item2 d2)))))\n\n(define (check t)\n  (if (leaf? t)\n      1\n      (+ 1 (+ (check (node-left t)) \n                         (check (node-right t))))))\n\n(define (main n)\n  (let* ((min-depth 4)\n         (max-depth (max (+ min-depth 2) n)))\n    (let ((stretch-depth (+ max-depth 1)))\n      (displayln "stretch tree of depth " stretch-depth " check: " (check (make 0 stretch-depth))))\n    (let ((long-lived-tree (make 0 max-depth)))\n      (begin\n        (define end (add1 max-depth))\n        (define (loop d)\n          (if (>= d end)\n              void\n              (begin\n                (let ((iterations (arithmetic-shift 1 (+ (- max-depth d) min-depth))))\n                  (displayln\n                    iterations " trees of depth " d " check: "\n                    (transduce \n                      (mapping (lambda (i) (make i d)))\n                      (lambda (c i) (+ c (check i)))\n                      0\n                      (range 0 iterations))))\n                (loop (+ 2 d)))))\n        (loop 4))      \n      (displayln "long lived tree of depth " max-depth " check: " (check long-lived-tree)))))\n\n(main 12)'}}]);