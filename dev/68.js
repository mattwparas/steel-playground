(this.webpackJsonp=this.webpackJsonp||[]).push([[68],{53:function(e,n,t){"use strict";t.r(n),n.default="(define (for-each func lst)\n    (if (null? lst) \n        void\n        (begin\n            (func (car lst))\n            (if (null? lst)\n                void\n                (for-each func (cdr lst))))))\n\n;; [LISTOF X] -> ( -> X u 'you-fell-off-the-end)\n(define (generate-one-element-at-a-time lst)\n  ;; Both internal functions are closures over lst\n\n  ;; Internal variable/Function which passes the current element in a list\n  ;; to its return argument (which is a continuation), or passes an end-of-list marker \n  ;; if no more elements are left. On each step the function name is \n  ;; rebound to a continuation which points back into the function body,\n  ;; while return is rebound to whatever continuation the caller specifies.\n  (define (control-state return)\n    (for-each \n     (lambda (element)\n               (set! return (call/cc\n                              (lambda (resume-here)\n                                ;; Grab the current continuation\n                               (set! control-state resume-here)\n                               (return element))))) ;; (return element) evaluates to next return\n     lst)\n    ;; this is reading the local variable\n    ;; but it needs to be reading from the heap\n    (return 'you-fell-off-the-end))\n\n  ;; (-> X u 'you-fell-off-the-end)\n  ;; This is the actual generator, producing one item from a-list at a time.\n  (define (generator)\n    (call/cc control-state))\n\n  ;; Return the generator \n  generator)\n\n(define generate-digit\n  (generate-one-element-at-a-time '(0 1 2)))\n\n(generate-digit) ;; 0\n(generate-digit) ;; 1\n(generate-digit) ;; 2\n(generate-digit) ;; you-fell-off-the-end\n(generate-digit) ;; you-fell-off-the-end\n\n\n\n"}}]);